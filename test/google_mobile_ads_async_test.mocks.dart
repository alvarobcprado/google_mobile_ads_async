// Mocks generated by Mockito 5.4.6 from annotations
// in google_mobile_ads_async/test/google_mobile_ads_async_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:google_mobile_ads/google_mobile_ads.dart' as _i2;
import 'package:google_mobile_ads_async/src/ad_factory.dart' as _i3;
import 'package:google_mobile_ads_async/src/ad_loader.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBannerAd_0 extends _i1.SmartFake implements _i2.BannerAd {
  _FakeBannerAd_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInterstitialAd_1 extends _i1.SmartFake
    implements _i2.InterstitialAd {
  _FakeInterstitialAd_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRewardedAd_2 extends _i1.SmartFake implements _i2.RewardedAd {
  _FakeRewardedAd_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRewardedInterstitialAd_3 extends _i1.SmartFake
    implements _i2.RewardedInterstitialAd {
  _FakeRewardedInterstitialAd_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNativeAd_4 extends _i1.SmartFake implements _i2.NativeAd {
  _FakeNativeAd_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAppOpenAd_5 extends _i1.SmartFake implements _i2.AppOpenAd {
  _FakeAppOpenAd_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAdRequest_6 extends _i1.SmartFake implements _i2.AdRequest {
  _FakeAdRequest_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAdSize_7 extends _i1.SmartFake implements _i2.AdSize {
  _FakeAdSize_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBannerAdListener_8 extends _i1.SmartFake
    implements _i2.BannerAdListener {
  _FakeBannerAdListener_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInterstitialAdLoadCallback_9 extends _i1.SmartFake
    implements _i2.InterstitialAdLoadCallback {
  _FakeInterstitialAdLoadCallback_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRewardedAdLoadCallback_10 extends _i1.SmartFake
    implements _i2.RewardedAdLoadCallback {
  _FakeRewardedAdLoadCallback_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AdFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdFactory extends _i1.Mock implements _i3.AdFactory {
  MockAdFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void loadBannerAd(
    String? adUnitId,
    _i2.AdSize? size,
    _i2.AdRequest? request,
    _i2.BannerAdListener? listener,
  ) => super.noSuchMethod(
    Invocation.method(#loadBannerAd, [adUnitId, size, request, listener]),
    returnValueForMissingStub: null,
  );

  @override
  void loadInterstitialAd(
    String? adUnitId,
    _i2.AdRequest? request,
    _i2.InterstitialAdLoadCallback? adLoadCallback,
  ) => super.noSuchMethod(
    Invocation.method(#loadInterstitialAd, [adUnitId, request, adLoadCallback]),
    returnValueForMissingStub: null,
  );

  @override
  void loadRewardedAd(
    String? adUnitId,
    _i2.AdRequest? request,
    _i2.RewardedAdLoadCallback? rewardedAdLoadCallback,
  ) => super.noSuchMethod(
    Invocation.method(#loadRewardedAd, [
      adUnitId,
      request,
      rewardedAdLoadCallback,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  void loadRewardedInterstitialAd(
    String? adUnitId,
    _i2.AdRequest? request,
    _i2.RewardedInterstitialAdLoadCallback? rewardedInterstitialAdLoadCallback,
  ) => super.noSuchMethod(
    Invocation.method(#loadRewardedInterstitialAd, [
      adUnitId,
      request,
      rewardedInterstitialAdLoadCallback,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  void loadNativeAd(
    String? adUnitId,
    _i2.AdRequest? request,
    _i2.NativeAdOptions? nativeAdOptions,
    String? factoryId,
    _i2.NativeAdListener? listener,
  ) => super.noSuchMethod(
    Invocation.method(#loadNativeAd, [
      adUnitId,
      request,
      nativeAdOptions,
      factoryId,
      listener,
    ]),
    returnValueForMissingStub: null,
  );

  @override
  void loadAppOpenAd(
    String? adUnitId,
    _i2.AdRequest? request,
    _i2.AppOpenAdLoadCallback? adLoadCallback,
  ) => super.noSuchMethod(
    Invocation.method(#loadAppOpenAd, [adUnitId, request, adLoadCallback]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AsyncAdLoader].
///
/// See the documentation for Mockito's code generation for more information.
class MockAsyncAdLoader extends _i1.Mock implements _i4.AsyncAdLoader {
  MockAsyncAdLoader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.BannerAd> loadBannerAd({
    required String? adUnitId,
    required _i2.AdSize? size,
    _i2.AdRequest? request,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#loadBannerAd, [], {
              #adUnitId: adUnitId,
              #size: size,
              #request: request,
            }),
            returnValue: _i5.Future<_i2.BannerAd>.value(
              _FakeBannerAd_0(
                this,
                Invocation.method(#loadBannerAd, [], {
                  #adUnitId: adUnitId,
                  #size: size,
                  #request: request,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.BannerAd>);

  @override
  _i5.Future<_i2.InterstitialAd> loadInterstitialAd({
    required String? adUnitId,
    _i2.AdRequest? request,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#loadInterstitialAd, [], {
              #adUnitId: adUnitId,
              #request: request,
            }),
            returnValue: _i5.Future<_i2.InterstitialAd>.value(
              _FakeInterstitialAd_1(
                this,
                Invocation.method(#loadInterstitialAd, [], {
                  #adUnitId: adUnitId,
                  #request: request,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.InterstitialAd>);

  @override
  _i5.Future<_i2.RewardedAd> loadRewardedAd({
    required String? adUnitId,
    _i2.AdRequest? request,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#loadRewardedAd, [], {
              #adUnitId: adUnitId,
              #request: request,
            }),
            returnValue: _i5.Future<_i2.RewardedAd>.value(
              _FakeRewardedAd_2(
                this,
                Invocation.method(#loadRewardedAd, [], {
                  #adUnitId: adUnitId,
                  #request: request,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.RewardedAd>);

  @override
  _i5.Future<_i2.RewardedInterstitialAd> loadRewardedInterstitialAd({
    required String? adUnitId,
    _i2.AdRequest? request,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#loadRewardedInterstitialAd, [], {
              #adUnitId: adUnitId,
              #request: request,
            }),
            returnValue: _i5.Future<_i2.RewardedInterstitialAd>.value(
              _FakeRewardedInterstitialAd_3(
                this,
                Invocation.method(#loadRewardedInterstitialAd, [], {
                  #adUnitId: adUnitId,
                  #request: request,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.RewardedInterstitialAd>);

  @override
  _i5.Future<_i2.NativeAd> loadNativeAd({
    required String? adUnitId,
    _i2.AdRequest? request,
    _i2.NativeAdOptions? nativeAdOptions,
    String? factoryId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#loadNativeAd, [], {
              #adUnitId: adUnitId,
              #request: request,
              #nativeAdOptions: nativeAdOptions,
              #factoryId: factoryId,
            }),
            returnValue: _i5.Future<_i2.NativeAd>.value(
              _FakeNativeAd_4(
                this,
                Invocation.method(#loadNativeAd, [], {
                  #adUnitId: adUnitId,
                  #request: request,
                  #nativeAdOptions: nativeAdOptions,
                  #factoryId: factoryId,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.NativeAd>);

  @override
  _i5.Future<_i2.AppOpenAd> loadAppOpenAd({
    required String? adUnitId,
    _i2.AdRequest? request,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#loadAppOpenAd, [], {
              #adUnitId: adUnitId,
              #request: request,
            }),
            returnValue: _i5.Future<_i2.AppOpenAd>.value(
              _FakeAppOpenAd_5(
                this,
                Invocation.method(#loadAppOpenAd, [], {
                  #adUnitId: adUnitId,
                  #request: request,
                }),
              ),
            ),
          )
          as _i5.Future<_i2.AppOpenAd>);
}

/// A class which mocks [BannerAd].
///
/// See the documentation for Mockito's code generation for more information.
class MockBannerAd extends _i1.Mock implements _i2.BannerAd {
  MockBannerAd() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AdRequest get request =>
      (super.noSuchMethod(
            Invocation.getter(#request),
            returnValue: _FakeAdRequest_6(this, Invocation.getter(#request)),
          )
          as _i2.AdRequest);

  @override
  _i2.AdSize get size =>
      (super.noSuchMethod(
            Invocation.getter(#size),
            returnValue: _FakeAdSize_7(this, Invocation.getter(#size)),
          )
          as _i2.AdSize);

  @override
  _i2.BannerAdListener get listener =>
      (super.noSuchMethod(
            Invocation.getter(#listener),
            returnValue: _FakeBannerAdListener_8(
              this,
              Invocation.getter(#listener),
            ),
          )
          as _i2.BannerAdListener);

  @override
  String get adUnitId =>
      (super.noSuchMethod(
            Invocation.getter(#adUnitId),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#adUnitId),
            ),
          )
          as String);

  @override
  set responseInfo(_i2.ResponseInfo? _responseInfo) => super.noSuchMethod(
    Invocation.setter(#responseInfo, _responseInfo),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> load() =>
      (super.noSuchMethod(
            Invocation.method(#load, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.AdSize?> getPlatformAdSize() =>
      (super.noSuchMethod(
            Invocation.method(#getPlatformAdSize, []),
            returnValue: _i5.Future<_i2.AdSize?>.value(),
          )
          as _i5.Future<_i2.AdSize?>);

  @override
  _i5.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [InterstitialAd].
///
/// See the documentation for Mockito's code generation for more information.
class MockInterstitialAd extends _i1.Mock implements _i2.InterstitialAd {
  MockInterstitialAd() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AdRequest get request =>
      (super.noSuchMethod(
            Invocation.getter(#request),
            returnValue: _FakeAdRequest_6(this, Invocation.getter(#request)),
          )
          as _i2.AdRequest);

  @override
  _i2.InterstitialAdLoadCallback get adLoadCallback =>
      (super.noSuchMethod(
            Invocation.getter(#adLoadCallback),
            returnValue: _FakeInterstitialAdLoadCallback_9(
              this,
              Invocation.getter(#adLoadCallback),
            ),
          )
          as _i2.InterstitialAdLoadCallback);

  @override
  set fullScreenContentCallback(
    _i2.FullScreenContentCallback<_i2.InterstitialAd>?
    _fullScreenContentCallback,
  ) => super.noSuchMethod(
    Invocation.setter(#fullScreenContentCallback, _fullScreenContentCallback),
    returnValueForMissingStub: null,
  );

  @override
  set onPaidEvent(_i2.OnPaidEventCallback? _onPaidEvent) => super.noSuchMethod(
    Invocation.setter(#onPaidEvent, _onPaidEvent),
    returnValueForMissingStub: null,
  );

  @override
  String get adUnitId =>
      (super.noSuchMethod(
            Invocation.getter(#adUnitId),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#adUnitId),
            ),
          )
          as String);

  @override
  set responseInfo(_i2.ResponseInfo? _responseInfo) => super.noSuchMethod(
    Invocation.setter(#responseInfo, _responseInfo),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> show() =>
      (super.noSuchMethod(
            Invocation.method(#show, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setImmersiveMode(bool? immersiveModeEnabled) =>
      (super.noSuchMethod(
            Invocation.method(#setImmersiveMode, [immersiveModeEnabled]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [RewardedAd].
///
/// See the documentation for Mockito's code generation for more information.
class MockRewardedAd extends _i1.Mock implements _i2.RewardedAd {
  MockRewardedAd() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RewardedAdLoadCallback get rewardedAdLoadCallback =>
      (super.noSuchMethod(
            Invocation.getter(#rewardedAdLoadCallback),
            returnValue: _FakeRewardedAdLoadCallback_10(
              this,
              Invocation.getter(#rewardedAdLoadCallback),
            ),
          )
          as _i2.RewardedAdLoadCallback);

  @override
  set fullScreenContentCallback(
    _i2.FullScreenContentCallback<_i2.RewardedAd>? _fullScreenContentCallback,
  ) => super.noSuchMethod(
    Invocation.setter(#fullScreenContentCallback, _fullScreenContentCallback),
    returnValueForMissingStub: null,
  );

  @override
  set onUserEarnedRewardCallback(
    _i2.OnUserEarnedRewardCallback? _onUserEarnedRewardCallback,
  ) => super.noSuchMethod(
    Invocation.setter(#onUserEarnedRewardCallback, _onUserEarnedRewardCallback),
    returnValueForMissingStub: null,
  );

  @override
  set onPaidEvent(_i2.OnPaidEventCallback? _onPaidEvent) => super.noSuchMethod(
    Invocation.setter(#onPaidEvent, _onPaidEvent),
    returnValueForMissingStub: null,
  );

  @override
  String get adUnitId =>
      (super.noSuchMethod(
            Invocation.getter(#adUnitId),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#adUnitId),
            ),
          )
          as String);

  @override
  set responseInfo(_i2.ResponseInfo? _responseInfo) => super.noSuchMethod(
    Invocation.setter(#responseInfo, _responseInfo),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> show({
    required _i2.OnUserEarnedRewardCallback? onUserEarnedReward,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#show, [], {
              #onUserEarnedReward: onUserEarnedReward,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setServerSideOptions(
    _i2.ServerSideVerificationOptions? options,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setServerSideOptions, [options]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setImmersiveMode(bool? immersiveModeEnabled) =>
      (super.noSuchMethod(
            Invocation.method(#setImmersiveMode, [immersiveModeEnabled]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [LoadAdError].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadAdError extends _i1.Mock implements _i2.LoadAdError {
  MockLoadAdError() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get code =>
      (super.noSuchMethod(Invocation.getter(#code), returnValue: 0) as int);

  @override
  String get domain =>
      (super.noSuchMethod(
            Invocation.getter(#domain),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#domain),
            ),
          )
          as String);

  @override
  String get message =>
      (super.noSuchMethod(
            Invocation.getter(#message),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.getter(#message),
            ),
          )
          as String);
}
